<?php
/**
 * @file gatekeeperui.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_permission()
 */
function gatekeeperui_permission() {
	return array(
		'use gatekeeper' => array(
			'title' => t("Use Gatekeeper"),
			'description' => t("Create and edit powers and gates")
		)
	);
}

/**
 * Implementation of hook_menu().
 */
function gatekeeperui_menu() {
	$items['admin/structure/gatekeeper'] = array(
    'title' => 'Gatekeeper',
    'page callback' => 'gatekeeperui_admin_page',
    'access arguments' => array('use gatekeeper'),
		'description' => 'Add and edit powers and gates to control functionality and features'
  );
	
	$items['admin/structure/gatekeeper/add'] = array(
    'title' => 'Add Power',
    'page callback' => 'drupal_get_form',
		'page arguments' => array("gatekeeperui_form"),
    'access arguments' => array('use gatekeeper'),
		'description' => 'Add and edit powers and gates to control functionality and features',
		'type' => MENU_LOCAL_ACTION
  );
	
	$items['admin/structure/gatekeeper/edit/%/%'] = array(
    'title' => 'Edit Power',
    'page callback' => 'drupal_get_form',
		'page arguments' => array("gatekeeperui_form", 4, 5),
    'access arguments' => array('use gatekeeper'),
		'description' => 'Add and edit powers and gates to control functionality and features',
		'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Insert/update function
 */
function gatekeeperui_save($data) {
	try {
		if(!isset($data)) {
			throw new Exception("Data missing");
		}
		else {
			try {
				$query = db_merge("gatekeeper")
					->key(array("power" => $data["power"], "gate" => $data["gate"]))
					->fields(array("power" => $data["power"], "gate" => $data["gate"], "magickey" => $data["magickey"], "masterkey" => $data["masterkey"]))
					->execute();
				
				if(!$query) {
					throw new Exception("Problem with the query");
				}
			}
			catch (Exception $e) {
				watchdog("gatekeeperui", $e, array(), WATCHDOG_ERROR);
			}
		}
	}
	catch (Exception $e) {
		watchdog("gatekeeperui", $e, array(), WATCHDOG_ERROR);
	}
}

/**
 * Form callback
 */
function gatekeeperui_form($form, &$form_state, $power = NULL, $gate = NULL) {
	$form = array();
	
	if(isset($power) && isset($gate)) {
		$data = gatekeeper_get($power, $gate);
		$magickey = $data->magickey;
		$masterkey = $data->masterkey;
	}
	
	$powers = gatekeeper_get_powers();
	
	$options = array();
	foreach($powers as $key => $pow) {
		$options[$pow] = $pow;
	}
	
	$form["power"] = array(
		'#type' => 'select',
		'#title' => t("Power"),
		'#description' => t("Select a power from the list. Powers must be defined via code and must be defined by your module/code via hook_register_power"),
		'#required' => TRUE,
		'#options' => $options,
		'#default_value' => isset($power) ? $options[$power] : NULL,
		'#disabled' => isset($power) ? TRUE : FALSE
	);
	
	$gates = _gakekeeperui_form_get_gates();
	$selected = isset($form_state['values']['gate']) ? $form_state['values']['gate'] : $gate;
	
	if(isset($magickey)) {
		$selected_magickey = $magickey;
	}
	else {
		$selected_magickey = isset($form_state["values"]["magickey"]) ? $form_state["values"]["magickey"] : NULL;
	}
	
	$form["gate"] = array(
		'#type' => 'select',
		'#title' => t("Select a gate"),
		'#description' => t("The gate is the criteria you're going to choose to validate if a user has access to a feature or not"),
		'#required' => TRUE,
		'#options' => $gates,
		'#default_value' => $selected,
		'#ajax' => array(
			'callback' => "_gatekeeperui_dropdown_callback",
			'wrapper' => 'dropdown-replace',
			'effect' => 'slide',
		),
		'#disabled' => isset($gate) ? TRUE : FALSE
	);
	
	$form["magickey"] = array(
		'#type' => 'select',
		'#title' => t("Select the magic key"),
		'#description' => t("The magic key is the value that will be used to check if the user has access to a gate"),
		'#prefix' => '<div id="dropdown-replace">',
		'#suffix' => '</div>',
		'#default_value' => $selected_magickey,
		'#options' => _gatekeeperui_options($selected)
	);
	
	$form["masterkey"] = array(
		'#type' => 'checkbox',
		'#default_option' => FALSE,
		'#title' => t("Activate master key?"),
		'#description' => t("If you activate the master key all users will be granted access"),
		'#default_value' => isset($masterkey) ? $masterkey : NULL
	);
	
	$form["submit"] = array(
		'#type' => 'submit',
		'#value' => t("Submit")
	);
	
	return $form;
}

/**
 * Get all gates
 */
function _gakekeeperui_form_get_gates() {
	$getgates = gatekeeper_get_gates();
	$gates = array();
	foreach($getgates as $key => $value) {
		$gates[] = $key;
	}
	
	return drupal_map_assoc($gates);
}

/**
 * Just return the new formed $form["magickey"]
 */
function _gatekeeperui_dropdown_callback($form, $form_state) {
	return $form['magickey'];
}

/**
 * Function to get the magickeys depending on the selected gate
 */
function _gatekeeperui_options($gate) {
	$magickeys = array();
	$getgates = gatekeeper_get_gates();
	
	$getmagickeys = $getgates[$gate]["options"];
	if($getmagickeys == array_values($getmagickeys)) {
		foreach($getmagickeys as $key => $value) {
			$magickeys[$value] = $value;
		}
	}
	else {
		foreach($getmagickeys as $key => $value) {
			$magickeys[$key] = $key;
		}
	}
	
	return $magickeys;
}



/**
 * Submit callback for gatekeeperui_form()
 *
 * @see gatekeeperui_form()
 */
function gatekeeperui_form_submit(&$form, &$form_state) {
	$values = $form_state["values"];
	
	$unset = array("submit", "form_build_id", "form_token", "form_id", "op");
	foreach($unset as $item) {
		unset($values[$item]);
	}
	
	gatekeeperui_save($values);
	drupal_goto("admin/structure/gatekeeper");
}

/**
 * table to administer gatekeeper
 */
function gatekeeperui_admin_page() {
	$list = gatekeeper_list();
	if($list) {
		$header = array(
			array("data" => t("Power"), 'field' => "power"),
			array("data" => t("Gate"), 'field' => "gate"),
			array("data" => t("Magic key"), 'field' => "magickey"),
			array("data" => t("Master key"), 'field' => "masterkey"),
			'edit',
		);
		
		foreach($list as $item) {
			$row["power"] = $item->power;
			$row["gate"] = $item->gate;
			$row["magickey"] = $item->magickey;
			switch($item->masterkey) {
				case 0:
					$masterkey = "DISABLED";
					break;
				
				case 1:
					$masterkey = "ENABLED";
					break;
			}
			$row["masterkey"] = $masterkey;
			$row["edit"] = l(t("Edit"), "admin/structure/gatekeeper/edit/" . $item->power . "/" . $item->gate);
			$rows[] = $row;
		}
		
		$output = theme("table", array("header" => $header, "rows" => $rows));	
	}
	else {
		$output = "Gatekeeper is not keeping anything";
	}
	
	return $output;
}
